version: '3.8'

services:
  backend:
    build:
      args:
        - ENVIRONMENT=development
    environment:
      - DEBUG=True
      - LOG_LEVEL=debug
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      # Enable auto-reload for development
      - RELOAD=True
      - RELOAD_DIRS=/app
      - RELOAD_INCLUDES=*.py
      - RELOAD_EXCLUDES=*.pyc,__pycache__
    volumes:
      - ./farmpower_backend_v2:/app
      # Node modules for frontend development (if applicable)
      - /app/node_modules
      # Python cache
      - /app/__pycache__
    ports:
      - "8000:8000"
      # Debug port for VS Code
      - "5678:5678"
    # Enable development tools
    command: >
      bash -c "pip install debugpy -t /tmp && python /tmp/debugpy --listen 0.0.0.0:5678 --wait-for-client -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    # Alternative command without debugger:
    # command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    stdin_open: true
    tty: true
    # For development, you might want to run tests on container start
    # entrypoint: ["/app/entrypoint.sh"]

  db:
    # Use a volume for development to persist data between container restarts
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    # Add more verbose logging for development
    command: postgres -c log_statement=all -c log_min_duration_statement=0
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_INITDB_ARGS=--data-checksums
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for development
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass your_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP server
    environment:
      - MH_UI_WEB_PATH=./mail
      - MH_UI_BIND_ADDR=0.0.0.0:8025
      - MH_API_BIND_ADDR=0.0.0.0:8025
      - MH_STORAGE=maildir
      - MH_MAILDIR_PATH=/maildir
    volumes:
      - mailhog_data:/maildir
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8025"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer as a lightweight database management tool
  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
    depends_on:
      - db

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379:0
      - REDIS_PASSWORD=your_redis_password
    ports:
      - "8081:8081"
    depends_on:
      - redis

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  mailhog_data:
