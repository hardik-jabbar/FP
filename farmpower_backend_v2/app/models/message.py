from datetime import datetime
from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Boolean, Text
from sqlalchemy.orm import relationship
from ..core.db import Base

def generate_conversation_id(user1_id: int, user2_id: int) -> str:
    """Generates a consistent conversation ID between two users."""
    if user1_id == user2_id: # Self-messaging, if allowed, or use a different pattern
        return f"user-{user1_id}-self"
    return "-".join(sorted(map(str, [user1_id, user2_id])))


class Message(Base):
    __tablename__ = "messages"

    id = Column(Integer, primary_key=True, index=True)

    sender_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)
    recipient_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)

    # conversation_id helps group messages between two users.
    # It can be generated by a convention (e.g., sorted user IDs).
    conversation_id = Column(String, index=True, nullable=False)

    content = Column(Text, nullable=False)

    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    is_read_by_recipient = Column(Boolean, default=False, nullable=False, index=True)

    # Relationships
    sender = relationship("User", foreign_keys=[sender_id], back_populates="sent_messages")
    recipient = relationship("User", foreign_keys=[recipient_id], back_populates="received_messages")

    def __repr__(self):
        return f"<Message(id={self.id}, from={self.sender_id}, to={self.recipient_id}, convo='{self.conversation_id}')>"
